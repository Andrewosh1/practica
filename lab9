#include <iostream>
using namespace std;

int** vvod(int** m, int n)
{
     int i, j;
     m = new int*[n];
     for (i = 0; i < n; i++) m[i] = new int[n];
     cout << "Введите элементы матрицы: \n";
     for (i = 0; i < n; i++)
     {
          for (j = 0; j < n; j++)
          {
               cout << "m[" << i << "][" << j << "] = ";
               cin >> m[i][j];
          }
      }
      return m;

}
void vivod(int** m, int n) //вывод матрицы на экран
{
     int i, j;
     for (i = 0; i < n; i++)
     {
          for (j = 0; j < n; j++)
          {
               cout << m[i][j] << " ";
          }
          cout << "\n";
     }
}

void maximum(int** m, int n)
{
     int i, j, max, im, jm, temp, mid, l;
     max = m[0][0];
     im = jm = 0;
     int k = 0; int p = 0;
     for (i = 0; i < n; i++) { //поиск max элемента
          for (j = 0; j < n; j++) {
               if (m[i][j] > max) {
                    max = m[i][j];
                    im = i;
                    jm = j;
               }
          }
     }
     cout << "Max элемент в матрице: " << max << "\n";
     mid = n / 2; //поиск центра
     while (jm != mid) // сдвиг вправо
     {
          temp = m[im][n - 1];
          for (int i = n - 1; i > 0; i--)
          {
               m[im][i] = m[im][i - 1];
          }
          m[im][0] = temp;
          if (jm == n - 1) jm = 0;
          else jm = jm + 1;
          k++;
     }
     while (im != mid) // сдвиг вниз
     {
          temp = m[n - 1][jm];
          for (int i = n - 1; i > 0; i--)
          {
               m[i][jm] = m[i - 1][jm];
          }
          m[0][jm] = temp;
          if (im == n - 1) im = 0;
          else im = im + 1;
          p++;
     }
     l = k + p;
     cout << "количество сдвигов:" << l << endl;
}

int main()
{
     setlocale(LC_CTYPE, "Russian");
     int n, ** m;
     m = NULL;
     do {
          cout << "Введите размерность матрицы (Значение нечётное) : ";
          cin >> n;
     } while (n % 2 == 0); //выделение памяти
     m = vvod(m, n);
     cout << "Инициализированная матрица: \n";
     vivod(m, n);
     maximum(m, n);
     cout << "Новая матрица: \n";
     vivod(m, n);
     delete[]m; //освобождение памяти
     return 0;
     }
